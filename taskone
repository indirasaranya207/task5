module ALU (
    input  [3:0] A,
    input  [3:0] B,
    input  [2:0] opcode,
    output reg [3:0] result
);

always @(*) begin
    case(opcode)
        3'b000: result = A + B;        // Addition
        3'b001: result = A - B;        // Subtraction
        3'b010: result = A & B;        // AND
        3'b011: result = A | B;        // OR
        3'b100: result = ~A;           // NOT (of A)
        default: result = 4'b0000;     // Default case
    endcase
end

endmodule
`timescale 1ns/1ps
module ALU_tb;

reg [3:0] A, B;
reg [2:0] opcode;
wire [3:0] result;

ALU uut (
    .A(A),
    .B(B),
    .opcode(opcode),
    .result(result)
);

initial begin
    $display("--- ALU Testbench ---");
    // Test Addition
    A = 4'b0011; B = 4'b0001; opcode = 3'b000; #10;
    $display("ADD: %b + %b = %b", A, B, result);

    // Test Subtraction
    A = 4'b0101; B = 4'b0010; opcode = 3'b001; #10;
    $display("SUB: %b - %b = %b", A, B, result);

    // Test AND
    A = 4'b1100; B = 4'b1010; opcode = 3'b010; #10;
    $display("AND: %b & %b = %b", A, B, result);

    // Test OR
    A = 4'b1100; B = 4'b1010; opcode = 3'b011; #10;
    $display("OR: %b | %b = %b", A, B, result);

    // Test NOT
    A = 4'b1010; B = 4'b0000; opcode = 3'b100; #10;
    $display("NOT: ~%b = %b", A, result);

    // Test Default
    A = 4'b0001; B = 4'b0010; opcode = 3'b111; #10;
    $display("DEF: opcode 111 -> %b", result);

    $finish;
end

endmodule
# ALU Simulation Report

## 1. Objective
To design and test a basic Arithmetic Logic Unit (ALU) that supports addition, subtraction, AND, OR, and NOT operations.

## 2. Design Files
- alu.v: ALU module
- alu_tb.v: Testbench

## 3. ALU Operations Table

| Opcode | Operation  | Description           |
|--------|------------|----------------------|
| 000    | ADD        | result = A + B       |
| 001    | SUBTRACT   | result = A - B       |
| 010    | AND        | result = A & B       |
| 011    | OR         | result = A | B       |
| 100    | NOT        | result = ~A          |
| others | DEFAULT    | result = 0           |

## 4. Simulation Results

Example output (from testbench):


--- ALU Testbench ---
ADD: 0011 + 0001 = 0100
SUB: 0101 - 0010 = 0011
AND: 1100 & 1010 = 1000
OR:  1100 | 1010 = 1110
NOT: ~1010 = 0101
DEF: opcode 111 -> 0000


## 5. Conclusion

The ALU performed all operations correctly as per the opcode. The testbench validates the functionality for each operation.
